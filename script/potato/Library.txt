let dic = GetCurrentScriptDirectory();
let objScene = GetEnemyBossSceneObjectID();

let shotangle1; 
let shotangle2;
let shotangle3;
let angleT;
let angleU;

// All of this belongs to ZUN.

let gun = dic ~ "/se/se_gun00.wav";
let hint = dic ~ "/se/se_hint00.wav";
let invalid = dic ~ "/se/se_invalid.wav";
let item = dic ~ "/se/se_item00.wav";
let kira_1 = dic ~ "/se/se_kira00.wav";
let kira_2 = dic ~ "/se/se_kira01.wav";
let laser_1 = dic ~ "/se/se_lazer00.wav";
let laser_2 = dic ~ "/se/se_lazer01.wav";
let msl = dic ~ "/se/se_msl.wav";
let nep = dic ~ "/se/se_nep00.wav";
let ok = dic ~ "/se/se_ok00.wav";
let option = dic ~ "/se/se_option.wav";
let pause = dic ~ "/se/se_pause.wav";
let pldead = dic ~ "/se/se_pldead00.wav";
let plst = dic ~ "/se/se_plst00.wav";
let power_1 = dic ~ "/se/se_power0.wav";
let power_2 = dic ~ "/se/se_power1.wav";
let powerup = dic ~ "/se/se_powerup.wav";
let select = dic ~ "/se/se_select00.wav";
let slash = dic ~ "/se/se_slash.wav";
let tan_1 = dic ~ "/se/se_tan00.wav";
let tan_2 = dic ~ "/se/se_tan01.wav";
let tan_3 = dic ~ "/se/se_tan02.wav";
let timeout = dic ~ "/se/se_timeout.wav";
let timeout2 = dic ~ "/se/se_timeout2.wav";
let warpl = dic ~ "/se/se_warpl.wav";
let warpr = dic ~ "/se/se_warpr.wav";
let water = dic ~ "/se/se_water.wav";
let alert = dic ~ "/se/se_alert.wav";
let bonus = dic ~ "/se/se_bonus.wav";
let bonus2 = dic ~ "/se/se_bonus2.wav";
let cancel = dic ~ "/se/se_cancel00.wav";
let cardget = dic ~ "/se/se_cardget.wav";
let cat_1 = dic ~ "/se/se_cat00.wav";
let cat_2 = dic ~ "/se/se_cat01.wav";
let ch_1 = dic ~ "/se/se_ch00.wav";
let ch_2 = dic ~ "/se/se_ch01.wav";
let damage_1 = dic ~ "/se/se_damage00.wav";
let damage_2 = dic ~ "/se/se_damage01.wav";
let enep_1 = dic ~ "/se/se_enep00.wav";
let enep_2 = dic ~ "/se/se_enep01.wav";
let enep_3 = dic ~ "/se/se_enep02.wav";
let extend = dic ~ "/se/se_extend.wav";
let graze = dic ~ "/se/se_graze.wav";

// Metalpipe...

let metalpipe = dic ~ "/se/se_metalpipe.wav";

task Invincibility{
	AddVirtualKey(VK_USER1,KEY_SPACE,KEY_INVALID);	
	loop
	{
		if(GetVirtualKeyState(VK_USER1)==KEY_HOLD)
		{
			SetPlayerInvincibilityFrame(30);
		}
		yield;
	}	
}

task TPlay(path)
{
	if(!Obj_IsDeleted(objBoss))
	{
		LoadSound(path);
		PlaySE(path);
	}
}

task BossName(name, posx, r1, g1, b1, r2, g2, b2){
let objname = ObjText_Create();
ObjText_SetText(objname,name);
ObjText_SetFontType(objname,"RussellSquare");
ObjText_SetFontSize(objname,16);
ObjText_SetFontColorTop(objname,r1,g1,b1);
ObjText_SetFontColorBottom(objname,r2,g2,b2);
ObjText_SetFontBorderType(objname,BORDER_SHADOW);
ObjText_SetFontBorderColor(objname,r1,g1,b1);
ObjText_SetFontBorderWidth(objname,1);
ObjText_SetHorizontalAlignment(objname, ALIGNMENT_RIGHT);
ObjText_SetMaxWidth(objname,GetStgFrameWidth);
Obj_SetRenderPriority(objname,0.8);
ObjRender_SetPosition(objname,posx, 16, 0);
ObjRender_SetAlpha(objname, 255);
}

task Finalize(obj){   
     TExplosionA(ObjMove_GetX(obj), ObjMove_GetY(obj), 1, 0.1);
     DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
     SetAutoDeleteObject(true);
     Obj_Delete(obj);
     CloseScript(GetOwnScriptID());
}

task TShake(frequency,duration,fadeTime){
	let CX = GetStgFrameWidth/2;
	let CY = GetStgFrameHeight/2;
	let initDist = frequency;

	loop(duration-fadeTime){
		Set2DCameraFocusX(CX+rand(-frequency,frequency));
		Set2DCameraFocusY(CY+rand(-frequency,frequency));
		yield;
	}
	loop(fadeTime){
		frequency -= (initDist/fadeTime);
		Set2DCameraFocusX(CX+rand(-frequency,frequency));
		Set2DCameraFocusY(CY+rand(-frequency,frequency));
		yield;
	}
	Reset2DCamera;
}

task setHitBox(obj){
     ObjEnemy_SetIntersectionCircleToShot(objBoss, GetX(obj), GetY(obj), 50); 
     ObjEnemy_SetIntersectionCircleToPlayer(objBoss, GetX(obj), GetY(obj), 35);
}

task Astroid(obj, x, y, num, num_times, size, angle, speed, acc, maxacc, graphic, bulletdelay, delay){ 
        loop(num_times){
        loop(num){
        if(Obj_IsDeleted(obj)){return;}
        let objShot = CreateShotA2(x + size*cos(angle) ^ 3, y + size*sin(angle) ^ 3, speed, angle, acc, maxacc, graphic, bulletdelay);
        angle+=360/num;
        }
        wait(delay);
    }
}

function InitializePotato{
	    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	    ObjEnemy_Regist(objBoss);
        let potato = dic ~ "img/potato.png";
        ObjPrim_SetTexture(objBoss, potato);
        ObjRender_SetScaleXYZ(objBoss, 0.5, 0.5, 0.5);
        ObjSprite2D_SetSourceRect(objBoss, 0, 0, 100, 100);
        ObjSprite2D_SetDestCenter(objBoss);
		return objBoss
}

task BulletWall(obj, x, y, num, increment, angle, speed, acc, maxacc, graphic, bulletdelay){
     loop(num){
     if(Obj_IsDeleted(obj)){return;}
     let objShot = CreateShotA2(x, y, speed, angle, acc, maxacc, graphic, bulletdelay);
     angle += increment;
     }     
}

function GetCenterX(){
        return GetStgFrameWidth() / 2;
}

function GetCenterY(){
        return GetStgFrameHeight() / 2;
}

function GetX(obj){
         return ObjMove_GetX(obj);
}

function GetY(obj){
         return ObjMove_GetY(obj);
}

function AngleToA1(obj1,obj2)
{
	let dir = atan2(ObjMove_GetY(obj1)-ObjMove_GetY(obj2),ObjMove_GetX(obj1)-ObjMove_GetX(obj2));
	return dir;
}

function AngleToA2(x1, y1, x2, y2)
{
	let dir = atan2(y1-y2,x1-x2);
	return dir;
}

function wait(n){
        loop(n){yield;}
}

function rand_int(min, max){
        return round(rand(min, max));
}